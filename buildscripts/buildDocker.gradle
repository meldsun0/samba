def dockerBuildVersion = project.hasProperty('release.releaseVersion') ? project.property('release.releaseVersion') : "${rootProject.version}"
def dockerOrgName = project.hasProperty('dockerOrgName') ? project.getProperty("dockerOrgName") : "meldsun"
def dockerArtifactName = project.hasProperty("dockerArtifactName") ? project.getProperty("dockerArtifactName") : "samba"
def dockerImageName = "${dockerOrgName}/${dockerArtifactName}"

tasks.register("dockerDistUntar") {
    dependsOn distTar
    dependsOn distZip
    println "Executing task: ${name}"
    def dockerBuildDir = "build/docker-samba/"
    def distTarFile = distTar.outputs.files.singleFile
    def distTarFileName = distTar.outputs.files.singleFile.name.replace(".tar.gz", "")

    doFirst {
        println "Executing task: ${name}"
        new File(dockerBuildDir).mkdir()
        copy {
            from tarTree(distTarFile)
            into(dockerBuildDir)
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }
        project.delete(files("${dockerBuildDir}/samba"))
        file("${dockerBuildDir}/${distTarFileName}").renameTo("${dockerBuildDir}/samba")
    }
}

tasks.register('distDocker') {
    dependsOn dockerDistUntar
    inputs.dir("build/docker-samba/")
    def dockerBuildDir = "build/docker-samba/"
    println "Executing task: ${name}"
    doLast {
        copy {
            from file("${projectDir}/docker/Dockerfile")
            into(dockerBuildDir)
        }
        exec {
            def image = "${dockerImageName}:${dockerBuildVersion}"

            def targetPlatform = project.findProperty('docker-platform') ?: "linux/amd64"
            def dockerPlatform = "--platform=${targetPlatform}"
            println "Building for platform: ${targetPlatform}"

            def gitDetails = getGitCommitDetails(7)
            // Detect the OS and set the executable
            workingDir dockerBuildDir
            if (System.getProperty('os.name').toLowerCase().contains('win')) {
                executable 'cmd'
                args '/c', "docker build ${dockerPlatform} --build-arg BUILD_DATE=${buildTime()} --build-arg VERSION=${dockerBuildVersion} --build-arg VCS_REF=${gitDetails.hash} -t ${image} ."
            } else {
                executable 'bash'  // or 'sh'
                args '-c', "docker build ${dockerPlatform} --build-arg BUILD_DATE=${buildTime()} --build-arg VERSION=${dockerBuildVersion} --build-arg VCS_REF=${gitDetails.hash} -t ${image} ."
            }
        }
    }
}

tasks.register('runContainer') {
    dependsOn distDocker
    println "Executing task: ${name}"
    doLast {
        exec {
            def image = "${dockerImageName}:${dockerBuildVersion}"
            if (System.getProperty('os.name').toLowerCase().contains('win')) {
                executable 'cmd'
                args '/c', "docker run  -p 8545:8545 -p 5051:5051 -p 8001:8001 -p 9000:9000/udp ${image}"
            } else {
                executable 'bash'  // or 'sh'
                args '-c',  "docker run -p 8545:8545 -p 5051:5051 -p 8001:8001 -p 9000:9000/udp ${image}"
            }
        }
    }
}