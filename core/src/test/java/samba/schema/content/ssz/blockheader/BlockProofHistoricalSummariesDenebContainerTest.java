package samba.schema.content.ssz.blockheader;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.apache.tuweni.bytes.Bytes;
import org.apache.tuweni.bytes.Bytes32;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import samba.domain.content.ContentProofConstants;
import tech.pegasys.teku.infrastructure.unsigned.UInt64;

public class BlockProofHistoricalSummariesDenebContainerTest {

    List<Bytes32> beaconBlockProofHistoricalSummaries;
    Bytes32 blockRoot;
    List<Bytes32> executionBlockProofDeneb;
    UInt64 slot;

  @BeforeEach
  public void setup() {
    this.beaconBlockProofHistoricalSummaries = new ArrayList<>();
    for (int i = 0;
        i < ContentProofConstants.BEACON_BLOCK_PROOF_HISTORICAL_SUMMARIES_VECTOR_SIZE;
        i++) this.beaconBlockProofHistoricalSummaries.add(Bytes32.repeat((byte) i));
    this.blockRoot = Bytes32.repeat((byte) 1);
    this.executionBlockProofDeneb = new ArrayList<>();
    for (int i = 0; i < ContentProofConstants.EXECUTION_BLOCK_PROOF_DENEB_SIZE; i++)
      this.executionBlockProofDeneb.add(Bytes32.repeat((byte) i));
    this.slot = UInt64.valueOf(1234);
  }

  @Test
  public void testSszDecode() {
    BlockProofHistoricalSummariesDenebContainer blockProofHistoricalSummariesContainer =
    BlockProofHistoricalSummariesDenebContainer.decodeBytes(
            Bytes.fromHexString(
                "0xa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0ca0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0bd204000000000000"));
    assertEquals(
        blockProofHistoricalSummariesContainer.getBeaconBlockProofHistoricalSummaries(),
        this.beaconBlockProofHistoricalSummaries);
    assertEquals(blockProofHistoricalSummariesContainer.getBlockRoot(), this.blockRoot);
    assertEquals(
        blockProofHistoricalSummariesContainer.getExecutionBlockProof(),
        this.executionBlockProofDeneb);
    assertEquals(blockProofHistoricalSummariesContainer.getSlot(), this.slot);
  }

  @Test
  public void testSszEncode() {
    BlockProofHistoricalSummariesDenebContainer blockProofHistoricalSummariesContainer =
        new BlockProofHistoricalSummariesDenebContainer(
            this.beaconBlockProofHistoricalSummaries,
            this.blockRoot,
            this.executionBlockProofDeneb,
            this.slot);
    Bytes encodedBlockProofHistoricalSummariesContainer =
        blockProofHistoricalSummariesContainer.sszSerialize();
    assertEquals(
        encodedBlockProofHistoricalSummariesContainer,
        Bytes.fromHexString(
            "0xa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080809090909090909090909090909090909090909090909090909090909090909090a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0bd204000000000000"));
  }
    
}
