package samba.schema.content.ssz.blockheader;

import static org.junit.jupiter.api.Assertions.assertEquals;

import samba.domain.content.ContentProofConstants;

import java.util.ArrayList;
import java.util.List;

import org.apache.tuweni.bytes.Bytes;
import org.apache.tuweni.bytes.Bytes32;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tech.pegasys.teku.infrastructure.unsigned.UInt64;

public class BlockProofHistoricalSummariesContainerTest {

  List<Bytes32> beaconBlockProofHistoricalSummaries;
  Bytes32 blockRoot;
  List<Bytes32> executionBlockProof;
  UInt64 slot;

  @BeforeEach
  public void setup() {
    this.beaconBlockProofHistoricalSummaries = new ArrayList<>();
    for (int i = 0;
        i < ContentProofConstants.BEACON_BLOCK_PROOF_HISTORICAL_SUMMARIES_VECTOR_SIZE;
        i++) this.beaconBlockProofHistoricalSummaries.add(Bytes32.repeat((byte) i));
    this.blockRoot = Bytes32.repeat((byte) 1);
    this.executionBlockProof = new ArrayList<>();
    for (int i = 0; i < ContentProofConstants.EXECUTION_BLOCK_PROOF_LIMIT; i++)
      this.executionBlockProof.add(Bytes32.repeat((byte) i));
    this.slot = UInt64.valueOf(1234);
  }

  @Test
  public void testSszDecode() {
    BlockProofHistoricalSummariesContainer blockProofHistoricalSummariesContainer =
        BlockProofHistoricalSummariesContainer.decodeBytes(
            Bytes.fromHexString(
                "0xa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0101010101010101010101010101010101010101010101010101010101010101cc010000da0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"));
    assertEquals(
        blockProofHistoricalSummariesContainer.getBeaconBlockProofHistoricalSummaries(),
        this.beaconBlockProofHistoricalSummaries);
    assertEquals(blockProofHistoricalSummariesContainer.getBlockRoot(), this.blockRoot);
    assertEquals(
        blockProofHistoricalSummariesContainer.getExecutionBlockProof(), this.executionBlockProof);
    assertEquals(blockProofHistoricalSummariesContainer.getSlot(), this.slot);
  }

  @Test
  public void testSszEncode() {
    BlockProofHistoricalSummariesContainer blockProofHistoricalSummariesContainer =
        new BlockProofHistoricalSummariesContainer(
            this.beaconBlockProofHistoricalSummaries,
            this.blockRoot,
            this.executionBlockProof,
            this.slot);
    Bytes encodedBlockProofHistoricalSummariesContainer =
        blockProofHistoricalSummariesContainer.sszSerialize();
    assertEquals(
        encodedBlockProofHistoricalSummariesContainer,
        Bytes.fromHexString(
            "0xa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0101010101010101010101010101010101010101010101010101010101010101cc010000da0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"));
  }
}
