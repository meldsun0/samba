package samba.schema.content.ssz.blockbody;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import org.apache.tuweni.bytes.Bytes;
import org.hyperledger.besu.crypto.SECPSignature;
import org.hyperledger.besu.datatypes.Address;
import org.hyperledger.besu.datatypes.Wei;
import org.hyperledger.besu.ethereum.core.BlockHeader;
import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;
import org.hyperledger.besu.ethereum.core.Transaction;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BlockBodyPreShanghaiContainerTest {

  List<Transaction> transactions;
  List<BlockHeader> uncles;

  @BeforeEach
  public void setup() {
    this.transactions = new ArrayList<>();
    for (int i = 0; i < 5; i++) {
      this.transactions.add(
          Transaction.builder()
              .nonce(1)
              .gasPrice(Wei.of(i + 1))
              .gasLimit(1)
              .to(Address.wrap(Bytes.fromHexString("0x1234567890123456789012345678901234567890")))
              .value(Wei.of(1))
              .payload(Bytes.fromHexString("0x1234567890123456789012345678901234567890"))
              .signature(
                  SECPSignature.create(
                      new BigInteger("1234567890"),
                      new BigInteger("987654321"),
                      (byte) 0,
                      new BigInteger(
                          "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", 16)))
              .build());
    }
    this.uncles = new ArrayList<>();
    for (int i = 0; i < 3; i++) {
      this.uncles.add(BlockHeaderBuilder.createDefault().buildBlockHeader());
    }
  }

  @Test
  public void testSszDecode() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        BlockBodyPreShanghaiContainer.decodeBytes(
            Bytes.fromHexString(
                "0x0800000043010000140000004f0000008a000000c500000000010000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010401941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010501941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000"));
    List<Transaction> decodedTransactions = blockBodyPreShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPreShanghaiContainer.getUncles();
    for (int i = 0; i < 5; i++) {
      assertTrue(this.transactions.get(i).equals(decodedTransactions.get(i)));
    }
    for (int i = 0; i < 3; i++) {
      assertTrue(this.uncles.get(i).equals(decodedUncles.get(i)));
    }
  }

  @Test
  public void testSszDecodeEmptyLists() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(List.of(), List.of());
    List<Transaction> decodedTransactions = blockBodyPreShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPreShanghaiContainer.getUncles();
    assertTrue(decodedTransactions.isEmpty());
    assertTrue(decodedUncles.isEmpty());
  }

  @Test
  public void testSszDecodeEmptyTransactions() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(List.of(), this.uncles);
    List<Transaction> decodedTransactions = blockBodyPreShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPreShanghaiContainer.getUncles();
    assertTrue(decodedTransactions.isEmpty());
    for (int i = 0; i < 3; i++) {
      assertTrue(this.uncles.get(i).equals(decodedUncles.get(i)));
    }
  }

  @Test
  public void testSszDecodeEmptyUncles() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(this.transactions, List.of());
    List<Transaction> decodedTransactions = blockBodyPreShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPreShanghaiContainer.getUncles();
    for (int i = 0; i < 5; i++) {
      assertTrue(this.transactions.get(i).equals(decodedTransactions.get(i)));
    }
    assertTrue(decodedUncles.isEmpty());
  }

  @Test
  public void testSszDecodeEmptyBytes() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        BlockBodyPreShanghaiContainer.decodeBytes(Bytes.fromHexString("0x0800000008000000c0"));
    List<Transaction> decodedTransactions = blockBodyPreShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPreShanghaiContainer.getUncles();
    assertTrue(decodedTransactions.isEmpty());
    assertTrue(decodedUncles.isEmpty());
  }

  @Test
  public void testSszEncode() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(this.transactions, this.uncles);
    Bytes encodedBytes = blockBodyPreShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0800000043010000140000004f0000008a000000c500000000010000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010401941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010501941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000"));
  }

  @Test
  public void testSszEncodeEmptyLists() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(List.of(), List.of());
    Bytes encodedBytes = blockBodyPreShanghaiContainer.sszSerialize();
    assertEquals(encodedBytes, Bytes.fromHexString("0x0800000008000000c0"));
  }

  @Test
  public void testSszEncodeEmptyTransactions() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(List.of(), this.uncles);
    Bytes encodedBytes = blockBodyPreShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0800000008000000f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001808401c9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000"));
  }

  @Test
  public void testSszEncodeEmptyUncles() {
    BlockBodyPreShanghaiContainer blockBodyPreShanghaiContainer =
        new BlockBodyPreShanghaiContainer(this.transactions, List.of());
    Bytes encodedBytes = blockBodyPreShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0800000043010000140000004f0000008a000000c500000000010000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010401941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010501941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1c0"));
  }
}
