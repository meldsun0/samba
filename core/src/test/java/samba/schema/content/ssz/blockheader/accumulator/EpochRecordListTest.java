package samba.schema.content.ssz.blockheader.accumulator;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.apache.tuweni.bytes.Bytes;
import org.apache.tuweni.bytes.Bytes32;
import org.apache.tuweni.units.bigints.UInt256;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class EpochRecordListTest {

  List<HeaderRecordContainer> headerRecordList = new ArrayList<>();

  @BeforeEach
  public void setUp() {
    for (int i = 0; i < 5; i++) {
      headerRecordList.add(new HeaderRecordContainer(Bytes32.repeat((byte) i), UInt256.valueOf(i)));
    }
  }

  @Test
  public void testSszDecode() {
    EpochRecordList epochRecordList =
        new EpochRecordList(
            Bytes.fromHexString(
                "0x
    assertEquals(headerRecordList, epochRecordList.getDecodedList());
  }

  @Test
  public void testSszEncode() {
    EpochRecordList epochRecordList = new EpochRecordList(headerRecordList);
    Bytes sszBytes = epochRecordList.getEncodedList().sszSerialize();
    assertEquals(
        sszBytes,
        Bytes.fromHexString(
            "0x
  }
}
