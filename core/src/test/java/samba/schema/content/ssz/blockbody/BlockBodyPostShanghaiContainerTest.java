package samba.schema.content.ssz.blockbody;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import org.apache.tuweni.bytes.Bytes;
import org.apache.tuweni.units.bigints.UInt64;
import org.hyperledger.besu.crypto.SECPSignature;
import org.hyperledger.besu.datatypes.Address;
import org.hyperledger.besu.datatypes.GWei;
import org.hyperledger.besu.datatypes.Wei;
import org.hyperledger.besu.ethereum.core.BlockHeader;
import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;
import org.hyperledger.besu.ethereum.core.Transaction;
import org.hyperledger.besu.ethereum.core.Withdrawal;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BlockBodyPostShanghaiContainerTest {

  List<Transaction> transactions;
  List<BlockHeader> uncles;
  List<Withdrawal> withdrawals;

  @BeforeEach
  public void setUp() {
    this.transactions = new ArrayList<>();
    for (int i = 0; i < 3; i++) {
      this.transactions.add(
          Transaction.builder()
              .nonce(1)
              .gasPrice(Wei.of(i + 1))
              .gasLimit(1)
              .to(Address.wrap(Bytes.fromHexString("0x1234567890123456789012345678901234567890")))
              .value(Wei.of(1))
              .payload(Bytes.fromHexString("0x1234567890123456789012345678901234567890"))
              .signature(
                  SECPSignature.create(
                      new BigInteger("1234567890"),
                      new BigInteger("987654321"),
                      (byte) 0,
                      new BigInteger(
                          "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", 16)))
              .build());
    }
    this.uncles = new ArrayList<>();
    for (int i = 0; i < 3; i++) {
      this.uncles.add(BlockHeaderBuilder.createDefault().buildBlockHeader());
    }
    this.withdrawals = new ArrayList<>();
    for (int i = 0; i < 3; i++) {
      this.withdrawals.add(
          new Withdrawal(
              UInt64.valueOf(1234 + i),
              UInt64.valueOf(1234),
              Address.wrap(Bytes.fromHexString("0x1234567890123456789012345678901234567890")),
              GWei.of(1234)));
    }
  }

  @Test
  public void testSszDecode() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        BlockBodyPostShanghaiContainer.decodeBytes(
            Bytes.fromHexString(
                "0x0c000000c9000000a80600000c0000004700000082000000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001808401c9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708800000000000000000c0000002b0000004a000000de8204d28204d29412345678901234567890123456789012345678908204d2de8204d38204d29412345678901234567890123456789012345678908204d2de8204d48204d29412345678901234567890123456789012345678908204d2"));
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    for (int i = 0; i < 3; i++)
      assert (this.transactions.get(i).equals(decodedTransactions.get(i)));
    for (int i = 0; i < 3; i++) assert (this.uncles.get(i).equals(decodedUncles.get(i)));
    for (int i = 0; i < 3; i++) assert (this.withdrawals.get(i).equals(decodedWithdrawals.get(i)));
  }

  @Test
  public void testSszDecodeEmptyLists() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), List.of(), List.of());
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    assertTrue(decodedTransactions.isEmpty());
    assertTrue(decodedUncles.isEmpty());
    assertTrue(decodedWithdrawals.isEmpty());
  }

  @Test
  public void testSszDecodeEmptyTransactions() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), this.uncles, this.withdrawals);
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    assertTrue(decodedTransactions.isEmpty());
    for (int i = 0; i < 3; i++) assert (this.uncles.get(i).equals(decodedUncles.get(i)));
    for (int i = 0; i < 3; i++) assert (this.withdrawals.get(i).equals(decodedWithdrawals.get(i)));
  }

  @Test
  public void testSszDecodeEmptyUncles() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, List.of(), this.withdrawals);
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    for (int i = 0; i < 3; i++)
      assert (this.transactions.get(i).equals(decodedTransactions.get(i)));
    assertTrue(decodedUncles.isEmpty());
    for (int i = 0; i < 3; i++) assert (this.withdrawals.get(i).equals(decodedWithdrawals.get(i)));
  }

  @Test
  public void testSszDecodeEmptyWithdrawals() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, this.uncles, List.of());
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    for (int i = 0; i < 3; i++)
      assert (this.transactions.get(i).equals(decodedTransactions.get(i)));
    for (int i = 0; i < 3; i++) assert (this.uncles.get(i).equals(decodedUncles.get(i)));
    assertTrue(decodedWithdrawals.isEmpty());
  }

  @Test
  public void testSszDecodeEmptyTransactionsAndUncles() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), List.of(), this.withdrawals);
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    assertTrue(decodedTransactions.isEmpty());
    assertTrue(decodedUncles.isEmpty());
    for (int i = 0; i < 3; i++) assert (this.withdrawals.get(i).equals(decodedWithdrawals.get(i)));
  }

  @Test
  public void testSszDecodeEmptyTransactionsAndWithdrawals() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), this.uncles, List.of());
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    assertTrue(decodedTransactions.isEmpty());
    for (int i = 0; i < 3; i++) assert (this.uncles.get(i).equals(decodedUncles.get(i)));
    assertTrue(decodedWithdrawals.isEmpty());
  }

  @Test
  public void testSszDecodeEmptyUnclesAndWithdrawals() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, List.of(), List.of());
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    for (int i = 0; i < 3; i++)
      assert (this.transactions.get(i).equals(decodedTransactions.get(i)));
    assertTrue(decodedUncles.isEmpty());
    assertTrue(decodedWithdrawals.isEmpty());
  }

  @Test
  public void testSszDecodeEmptyBytes() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        BlockBodyPostShanghaiContainer.decodeBytes(
            Bytes.fromHexString("0x0c0000000c0000000d000000c0"));
    List<Transaction> decodedTransactions = blockBodyPostShanghaiContainer.getTransactions();
    List<BlockHeader> decodedUncles = blockBodyPostShanghaiContainer.getUncles();
    List<Withdrawal> decodedWithdrawals = blockBodyPostShanghaiContainer.getWithdrawals();
    assertTrue(decodedTransactions.isEmpty());
    assertTrue(decodedUncles.isEmpty());
    assertTrue(decodedWithdrawals.isEmpty());
  }

  @Test
  public void testSszEncode() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, this.uncles, this.withdrawals);
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c000000c9000000a80600000c0000004700000082000000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708800000000000000000c0000002b0000004a000000de8204d28204d29412345678901234567890123456789012345678908204d2de8204d38204d29412345678901234567890123456789012345678908204d2de8204d48204d29412345678901234567890123456789012345678908204d2"));
  }

  @Test
  public void testSszEncodeEmptyLists() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), List.of(), List.of());
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(encodedBytes, Bytes.fromHexString("0x0c0000000c0000000d000000c0"));
  }

  @Test
  public void testSszEncodeEmptyTransactions() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), this.uncles, this.withdrawals);
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c0000000c000000eb050000f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708800000000000000000c0000002b0000004a000000de8204d28204d29412345678901234567890123456789012345678908204d2de8204d38204d29412345678901234567890123456789012345678908204d2de8204d48204d29412345678901234567890123456789012345678908204d2"));
  }

  @Test
  public void testSszEncodeEmptyUncles() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, List.of(), this.withdrawals);
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c000000c9000000ca0000000c0000004700000082000000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1c00c0000002b0000004a000000de8204d28204d29412345678901234567890123456789012345678908204d2de8204d38204d29412345678901234567890123456789012345678908204d2de8204d48204d29412345678901234567890123456789012345678908204d2"));
  }

  @Test
  public void testSszEncodeEmptyWithdrawals() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, this.uncles, List.of());
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c000000c9000000a80600000c0000004700000082000000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000"));
  }

  @Test
  public void testSszEncodeEmptyTransactionsAndUncles() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), List.of(), this.withdrawals);
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c0000000c0000000d000000c00c0000002b0000004a000000de8204d28204d29412345678901234567890123456789012345678908204d2de8204d38204d29412345678901234567890123456789012345678908204d2de8204d48204d29412345678901234567890123456789012345678908204d2"));
  }

  @Test
  public void testSszEncodeEmptyTransactionsAndWithdrawals() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(List.of(), this.uncles, List.of());
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c0000000c000000eb050000f905dcf901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000000"));
  }

  @Test
  public void testSszEncodeEmptyUnclesAndWithdrawals() {
    BlockBodyPostShanghaiContainer blockBodyPostShanghaiContainer =
        new BlockBodyPostShanghaiContainer(this.transactions, List.of(), List.of());
    Bytes encodedBytes = blockBodyPostShanghaiContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x0c000000c9000000ca0000000c0000004700000082000000f839010101941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010201941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1f839010301941234567890123456789012345678901234567890019412345678901234567890123456789012345678901b84499602d2843ade68b1c0"));
  }
}
