package samba.schema.content.ssz.blockheader;

import static org.junit.jupiter.api.Assertions.assertEquals;

import samba.domain.content.ContentProofConstants;
import samba.domain.content.ContentProofType;

import java.util.ArrayList;
import java.util.List;

import org.apache.tuweni.bytes.Bytes;
import org.apache.tuweni.bytes.Bytes32;
import org.hyperledger.besu.ethereum.core.BlockHeader;
import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;
import org.junit.jupiter.api.Test;
import tech.pegasys.teku.infrastructure.unsigned.UInt64;

public class BlockHeaderWithProofContainerTest {

  BlockHeader blockHeader = BlockHeaderBuilder.createDefault().buildBlockHeader();

  private static BlockHeaderProofUnion createNoneUnion() {
    return new BlockHeaderProofUnion(ContentProofType.NONE);
  }

  private static BlockHeaderProofUnion createBlockProofHistoricalHashesAccumulatorUnion() {
    List<Bytes32> blockProofHistoricalHashesAccumulator = new ArrayList<>();
    for (int i = 0;
        i < ContentProofConstants.BLOCK_PROOF_HISTORICAL_HASHES_ACCUMULATOR_VECTOR_SIZE;
        i++) blockProofHistoricalHashesAccumulator.add(Bytes32.repeat((byte) i));
    return new BlockHeaderProofUnion(
        ContentProofType.BLOCK_PROOF_HISTORICAL_HASHES_ACCUMULATOR,
        blockProofHistoricalHashesAccumulator);
  }

  private static BlockHeaderProofUnion createBlockProofHistoricalRootsUnion() {
    List<Bytes32> beaconBlockProof = new ArrayList<>();
    for (int i = 0; i < ContentProofConstants.BEACON_BLOCK_PROOF_HISTORICAL_ROOTS_VECTOR_SIZE; i++)
      beaconBlockProof.add(Bytes32.repeat((byte) i));
    Bytes32 beaconBlockRoot = Bytes32.repeat((byte) 1);
    List<Bytes32> executionBlockProof = new ArrayList<>();
    UInt64 slot = UInt64.valueOf(1234);
    for (int i = 0; i < ContentProofConstants.EXECUTION_BLOCK_PROOF_SIZE; i++)
      executionBlockProof.add(Bytes32.repeat((byte) i));
    return new BlockHeaderProofUnion(
        ContentProofType.BLOCK_PROOF_HISTORICAL_ROOTS,
        beaconBlockProof,
        beaconBlockRoot,
        executionBlockProof,
        slot);
  }

  private static BlockHeaderProofUnion createDecodeBlockProofHistoricalSummariesUnion() {
    List<Bytes32> beaconBlockProof = new ArrayList<>();
    for (int i = 0;
        i < ContentProofConstants.BEACON_BLOCK_PROOF_HISTORICAL_SUMMARIES_VECTOR_SIZE;
        i++) beaconBlockProof.add(Bytes32.repeat((byte) i));
    Bytes32 beaconBlockRoot = Bytes32.repeat((byte) 1);
    List<Bytes32> executionBlockProof = new ArrayList<>();
    UInt64 slot = UInt64.valueOf(1234);
    for (int i = 0; i < ContentProofConstants.EXECUTION_BLOCK_PROOF_LIMIT; i++)
      executionBlockProof.add(Bytes32.repeat((byte) i));
    return new BlockHeaderProofUnion(
        ContentProofType.BLOCK_PROOF_HISTORICAL_SUMMARIES,
        beaconBlockProof,
        beaconBlockRoot,
        executionBlockProof,
        slot);
  }

  @Test
  public void testSszDecodeNone() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        BlockHeaderWithProofContainer.decodeBytes(
            Bytes.fromHexString(
                "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47088000000000000000000"));
    BlockHeader decodedBlockHeader = blockHeaderWithProofContainer.getBlockHeader();
    assertEquals(this.blockHeader, decodedBlockHeader);
    assertEquals(
        createNoneUnion().getProofType(),
        blockHeaderWithProofContainer.getBlockHeaderProof().getProofType());
  }

  @Test
  public void testSszDecodeBlockProofHistoricalHashesAccumulator() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        BlockHeaderWithProofContainer.decodeBytes(
            Bytes.fromHexString(
                "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85aa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e"));
    BlockHeader decodedBlockHeader = blockHeaderWithProofContainer.getBlockHeader();
    BlockHeaderProofUnion testBlockHeaderProofUnion =
        createBlockProofHistoricalHashesAccumulatorUnion();
    assertEquals(this.blockHeader, decodedBlockHeader);
    assertEquals(
        testBlockHeaderProofUnion.getProofType(),
        blockHeaderWithProofContainer.getBlockHeaderProof().getProofType());
    assertEquals(
        testBlockHeaderProofUnion.getBlockProofHistoricalHashesAccumulator(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalHashesAccumulator());
  }

  @Test
  public void testSszDecodeBlockProofHistoricalRoots() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        BlockHeaderWithProofContainer.decodeBytes(
            Bytes.fromHexString(
                "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85aa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0da0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0ad204000000000000"));
    BlockHeader decodedBlockHeader = blockHeaderWithProofContainer.getBlockHeader();
    BlockHeaderProofUnion testBlockHeaderProofUnion = createBlockProofHistoricalRootsUnion();
    assertEquals(this.blockHeader, decodedBlockHeader);
    assertEquals(
        testBlockHeaderProofUnion.getProofType(),
        blockHeaderWithProofContainer.getBlockHeaderProof().getProofType());
    assertEquals(
        testBlockHeaderProofUnion
            .getBlockProofHistoricalRootsContainer()
            .getBeaconBlockProofHistoricalRoots(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalRootsContainer()
            .getBeaconBlockProofHistoricalRoots());
    assertEquals(
        testBlockHeaderProofUnion.getBlockProofHistoricalRootsContainer().getBlockRoot(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalRootsContainer()
            .getBlockRoot());
    assertEquals(
        testBlockHeaderProofUnion.getBlockProofHistoricalRootsContainer().getExecutionBlockProof(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalRootsContainer()
            .getExecutionBlockProof());
    assertEquals(
        testBlockHeaderProofUnion.getBlockProofHistoricalRootsContainer().getSlot(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalRootsContainer()
            .getSlot());
  }

  @Test
  public void testSszDecodeBlockProofHistoricalSummaries() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        BlockHeaderWithProofContainer.decodeBytes(
            Bytes.fromHexString(
                "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85aa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0101010101010101010101010101010101010101010101010101010101010101cc010000da0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"));
    BlockHeader decodedBlockHeader = blockHeaderWithProofContainer.getBlockHeader();
    BlockHeaderProofUnion testBlockHeaderProofUnion =
        createDecodeBlockProofHistoricalSummariesUnion();
    assertEquals(this.blockHeader, decodedBlockHeader);
    assertEquals(
        testBlockHeaderProofUnion.getProofType(),
        blockHeaderWithProofContainer.getBlockHeaderProof().getProofType());
    assertEquals(
        testBlockHeaderProofUnion
            .getBlockProofHistoricalSummariesContainer()
            .getBeaconBlockProofHistoricalSummaries(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalSummariesContainer()
            .getBeaconBlockProofHistoricalSummaries());
    assertEquals(
        testBlockHeaderProofUnion.getBlockProofHistoricalSummariesContainer().getBlockRoot(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalSummariesContainer()
            .getBlockRoot());
    assertEquals(
        testBlockHeaderProofUnion
            .getBlockProofHistoricalSummariesContainer()
            .getExecutionBlockProof(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalSummariesContainer()
            .getExecutionBlockProof());
    assertEquals(
        testBlockHeaderProofUnion.getBlockProofHistoricalSummariesContainer().getSlot(),
        blockHeaderWithProofContainer
            .getBlockHeaderProof()
            .getBlockProofHistoricalSummariesContainer()
            .getSlot());
  }

  @Test
  public void testSszEncodeNone() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        new BlockHeaderWithProofContainer(this.blockHeader, createNoneUnion());
    Bytes encodedBytes = blockHeaderWithProofContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47088000000000000000000"));
  }

  @Test
  public void testSszEncodeBlockProofHistoricalHashesAccumulator() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        new BlockHeaderWithProofContainer(
            this.blockHeader, createBlockProofHistoricalHashesAccumulatorUnion());
    Bytes encodedBytes = blockHeaderWithProofContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85aa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e"));
  }

  @Test
  public void testSszEncodeBlockProofHistoricalRoots() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        new BlockHeaderWithProofContainer(this.blockHeader, createBlockProofHistoricalRootsUnion());
    Bytes encodedBytes = blockHeaderWithProofContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001808401c9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85aa0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0da0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0ad204000000000000"));
  }

  @Test
  public void testSszEncodeBlockProofHistoricalSummaries() {
    BlockHeaderWithProofContainer blockHeaderWithProofContainer =
        new BlockHeaderWithProofContainer(
            this.blockHeader, createDecodeBlockProofHistoricalSummariesUnion());
    Bytes encodedBytes = blockHeaderWithProofContainer.sszSerialize();
    assertEquals(
        encodedBytes,
        Bytes.fromHexString(
            "0x08000000fc010000f901f1a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc9c380808080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708800000000000000000300000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080809090909090909090909090909090909090909090909090909090909090909090a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0101010101010101010101010101010101010101010101010101010101010101cc010000da0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"));
  }
}
